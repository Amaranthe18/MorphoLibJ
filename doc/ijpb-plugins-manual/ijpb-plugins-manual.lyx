#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{hyperref}
\usepackage{lstlinebgrd}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{lightgray}{rgb}{0.95,0.95,0.95}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\hypersetup{colorlinks=true, citecolor=blue}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
IJPB Plugins user manual
\end_layout

\begin_layout Author
David Legland and Ignacio Arganda-Carreras
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Abstract
The 
\begin_inset Quotes fld
\end_inset

ijpb-plugins
\begin_inset Quotes frd
\end_inset

 library for ImageJ/Fiji contains a variety of plugins for processing and
 analysing 2D or 3D images.
 It was originally designed for the study of plant cell images, but the
 algorithms are generic and can be applied to any type of image.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO:
\end_layout

\begin_layout Itemize
finir de rédiger les paragraphes
\end_layout

\begin_layout Itemize
ajouter illustrations 
\end_layout

\begin_layout Itemize
peaufiner vocabulaire : regions / label, component / region...
\end_layout

\begin_layout Itemize
ajouter une section 
\begin_inset Quotes eld
\end_inset

developeur
\begin_inset Quotes erd
\end_inset

, avec les différentes possibilités pour utiliser la bibliothèque dans un
 plugin.
\end_layout

\begin_deeper
\begin_layout Itemize
runPlugin(
\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
MorphologicalFilter.gradient(image, se);
\end_layout

\begin_layout Itemize
algo = new GeodesicReconstruction3DScanningGray8(); algo.setConnectivity(26);
 result = algo.applyTo(marker, mask);
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Chapter
Key features
\end_layout

\begin_layout Standard
The library implements several functionalities that were missing in the
 ImageJ software (
\begin_inset CommandInset citation
LatexCommand citet
key "schneider2012671"

\end_inset

), and that were not or only partially covered by other plugins.
 
\end_layout

\begin_layout Itemize
morphological filtering: erosion & dilation, closing & opening, morphological
 gradient & laplacian, top-hat...
\end_layout

\begin_layout Itemize
morphological reconstruction, allowing fast detection of regional or extended
 extrema, removing of borders, or hole filling
\end_layout

\begin_layout Itemize
watershed segmentation + GUI, making it possible to segment 2D/3D images
 of cell tissues
\end_layout

\begin_layout Itemize
2D/3D measurements: volume, surface area, inertia ellipse/ellipsoid...
\end_layout

\begin_layout Itemize
binary / label images utilities
\end_layout

\begin_layout Standard
The home page of the project is 
\begin_inset CommandInset href
LatexCommand href
target "http://fiji.sc/Morphological_Segmentation"

\end_inset

.
 The project is hosted on GitHub: 
\begin_inset CommandInset href
LatexCommand href
target "http://github.com/ijpb/ijpb-plugins"

\end_inset

.
\end_layout

\begin_layout Chapter
Quick start guide
\end_layout

\begin_layout Section
Installation in ImageJ
\end_layout

\begin_layout Standard
To install the IJPB-plugins toolkit in ImageJ, you only need to download
 the latest release (in the form of a JAR file) into ImageJ's plugins folder
 and restart ImageJ.
 
\end_layout

\begin_layout Standard
All released versions can be found at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://sites.imagej.net/IJPB-plugins/plugins/
\end_layout

\end_inset

.
 Notice the jar files contain a time stamp at the end of their names that
 need to be removed.
\end_layout

\begin_layout Section
Installation in Fiji
\end_layout

\begin_layout Standard
If you use Fiji (
\begin_inset CommandInset citation
LatexCommand citet
key "schindelin2012fiji"

\end_inset

), the IJPB-plugins toolkit can be easily installed by adding its update
 site to Fiji's list of update sites:
\end_layout

\begin_layout Enumerate
Open Fiji and select 
\emph on
Help > Update...

\emph default
 from the Fiji menu to start the updater.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename images/Fiji-updater-menu.png
	width 75text%

\end_inset


\end_layout

\begin_layout Enumerate
When the updater is open, click on 
\emph on
Manage update sites
\emph default
.
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename images/Fiji-updater-GUI.png
	width 75text%

\end_inset


\end_layout

\begin_layout Enumerate
This brings up a dialog where you can activate additional update sites:
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename images/Fiji-updater-sites-manager.png
	width 75text%

\end_inset


\end_layout

\begin_layout Enumerate
Activate the IJPB-plugins update site and close the dialog.
 Now you should see an additional jar file for download:
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename images/Fiji-updater-ijpb-jar.png
	width 75text%

\end_inset


\end_layout

\begin_layout Enumerate
Finally, click on 
\emph on
Apply changes
\emph default
 and restart Fiji.
 All the plugins should be available after restarting.
\end_layout

\begin_layout Chapter
Morphological filters
\end_layout

\begin_layout Standard
Morphological filters consider the neighborhood of each pixel/voxel according
 to a structuring element of a given size and shape.
 The following filters are implemented both for 2D and 3D images, and work
 for binary as well as grey level images:
\end_layout

\begin_layout Description
erosion keeps the minimum value within the neighborhood defined by the structuri
ng element.
\end_layout

\begin_layout Description
dilation keeps the maximum value within the neighborhood defined by the
 structuring element.
\end_layout

\begin_layout Description
closing consists in the succession of a dilation with an erosion.
 Morphological closing makes dark structures smaller than the structuring
 element disappear.
\end_layout

\begin_layout Description
opening consists in the succession of an erosion with a dilation.
 Morphological opening makes bright structures smaller than the structuring
 element disappear.
\end_layout

\begin_layout Description
morphological
\begin_inset space ~
\end_inset

gradient is defined as the difference of a morphological dilation and a
 morphological erosion with the same structuring element, and enhances edges
 of the original images.
\end_layout

\begin_layout Description
morphological
\begin_inset space ~
\end_inset

laplacien is defined as half the sum of a morphological dilation and a morpholog
ical erosion with the same structuring element, minus the original image,
 and enhances edges of the image.
\end_layout

\begin_layout Description
black
\begin_inset space ~
\end_inset

top-hat consists in subtracting the original image from the result of a
 morphological closing, and results in the enhancement of dark structures
 smaller than structuring element.
\end_layout

\begin_layout Description
white
\begin_inset space ~
\end_inset

top-hat consists in subtracting the result of a morphological opening from
 the original image, and results in the enhancement of bright structures
 smaller than structuring element.
\end_layout

\begin_layout Standard
The following structuring elements can be used for 2D images:
\end_layout

\begin_layout Itemize
disk
\end_layout

\begin_layout Itemize
square
\end_layout

\begin_layout Itemize
octagon
\end_layout

\begin_layout Itemize
diamond
\end_layout

\begin_layout Itemize
line with angle of 0, 90, 45 or 135 degrees
\end_layout

\begin_layout Chapter
Morphological reconstruction
\end_layout

\begin_layout Standard
The morphological reconstruction provides the basis for many useful algorithms:
\end_layout

\begin_layout Itemize
detection of regional minima / maxima
\end_layout

\begin_layout Itemize
detection of extended minima / maxima
\end_layout

\begin_layout Itemize
area or volume reconstruction
\end_layout

\begin_layout Itemize
removing of borders
\end_layout

\begin_layout Itemize
hole filling
\end_layout

\begin_layout Chapter
Watershed segmentation
\end_layout

\begin_layout Standard
The watershed algorithm assimilates the grey level image to a digital elevation
 model, and aims at detecting the different catchment basins.
 In the grey-level image, the catchment basins correspond to dark regions
 surrounded by bright structures (the 
\begin_inset Quotes eld
\end_inset

crests
\begin_inset Quotes erd
\end_inset

).
 It is a very popular technique specially used to segment touching objects.
 The IJPB-plugins suite contains several implementations of the algorithm,
 described in the following sections.
\end_layout

\begin_layout Section
Classic Watershed plugin
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Classic Watershed is an ImageJ/Fiji plugin to perform watershed segmentation
 of grayscale 2D/3D images using flooding simulations as described by 
\begin_inset CommandInset citation
LatexCommand citet
key "soille1990determining"

\end_inset

.
\end_layout

\begin_layout Standard
The basic idea consists of considering the input image as topographic surface
 and placing a water source in each regional minimum of its relief.
 Next the entire relief is flooded from the sources and dams are placed
 where the different water sources meet.
\end_layout

\begin_layout Standard
All points in the surface at a given minimum constitute the 
\series bold
catchment basin
\series default
 associated with that minimum.
 The 
\series bold
watersheds
\series default
 are the zones dividing adjacent catchment basins.
\end_layout

\begin_layout Standard
The first image points that are reached by water are the points at the lowest
 grayscale value 
\begin_inset Formula $h_{{min}}$
\end_inset

, then all image pixels are progressively reached up to the highest level
 
\begin_inset Formula $h_{{max}}$
\end_inset

 (see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-overview-of-flooding"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/watershed-flooding-scheme.svg
	lyxscale 50
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schematic-overview-of-flooding"

\end_inset

Schematic overview of watershed flooding in 1D
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout Standard
The Classic Watershed plugin runs on any grayscale image (8, 16 and 32-bit)
 in 2D and 3D.
 At least one image needs to be open in order for the plugin to run.
 If that's the case, a dialog like the following will pop up: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Classic-Watershed-dialog.png
	width 30text%

\end_inset


\end_layout

\begin_layout Standard
Let's have a look at the different parameters:
\end_layout

\begin_layout Itemize
Image parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Input image
\series default
: grayscale image to flood, usually the gradient of an image.
 
\end_layout

\begin_layout Itemize

\series bold
Mask image
\series default
 (optional): binary image of the same dimensions as the input image which
 can be used to restrict the areas of application of the algorithm.
 Set to "None" to run the method on the whole input image.
\end_layout

\end_deeper
\begin_layout Itemize
Morphological parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Use diagonal connectivity
\series default
: select to allow the flooding in diagonal directions (8-connectivity in
 2D and 26-connectivity in 3D).
 
\end_layout

\begin_layout Itemize

\series bold
Min h
\series default
: minimum grayscale value to start flooding from (by default, set to the
 minimum value of the image type).
 
\end_layout

\begin_layout Itemize

\series bold
Max h
\series default
: maximum grayscale value to reach with flooding (by default, set to the
 maximum value of the image type).
\end_layout

\end_deeper
\begin_layout Standard
Output: 
\end_layout

\begin_layout Itemize

\series bold
Labeled image
\series default
 containing the resulting catchment basins (with integer values 1, 2, 3...)
 and watershed lines (with 0 value).
\end_layout

\begin_layout Subsection
Over-segmentation
\end_layout

\begin_layout Standard
Normally, Classic Watershed will lead to an over-segmentation of the input
 image, especially for noisy images with many regional minima.
 In that case, it is recommended to either 
\series bold
pre-process the image before
\series default
 running the plugin, 
\series bold
or merge regions based on a similarity criterion afterwards
\series default
.
 Several denoising methods are available in Fiji/ImageJ, namely: median
 filtering, Gaussian blur, bilateral filtering, etc.
\end_layout

\begin_layout Paragraph

\series bold
Example:
\end_layout

\begin_layout Standard
This short macro runs the plugin twice in the blobs sample, first without
 pre-processing and then after applying a Gaussian blur of radius 3:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

// load the Blobs sample image
\end_layout

\begin_layout Plain Layout

run("Blobs (25K)"); 
\end_layout

\begin_layout Plain Layout

// invert LUT and pixel values to have dark blobs 
\end_layout

\begin_layout Plain Layout

run("Invert LUT"); 
\end_layout

\begin_layout Plain Layout

run("Invert"); 
\end_layout

\begin_layout Plain Layout

// run plugin on image 
\end_layout

\begin_layout Plain Layout

run("Classic Watershed", "input=blobs mask=None use min=0 max=150"); 
\end_layout

\begin_layout Plain Layout

// apply LUT to facilitate result visualization 
\end_layout

\begin_layout Plain Layout

run("3-3-2 RGB"); 
\end_layout

\begin_layout Plain Layout

// pre-process image with Gaussian blur selectWindow("blobs.gif"); 
\end_layout

\begin_layout Plain Layout

run("Gaussian Blur...", "sigma=3"); 
\end_layout

\begin_layout Plain Layout

rename("blobs-blur.gif"); 
\end_layout

\begin_layout Plain Layout

// apply plugin on pre-processed image 
\end_layout

\begin_layout Plain Layout

run("Classic Watershed","input=blobs-blur mask=None use min=0 max=150");
 
\end_layout

\begin_layout Plain Layout

// apply LUT to facilitate result visualization 
\end_layout

\begin_layout Plain Layout

run("3-3-2 RGB");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/blobs-blur.png
	width 32text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Gaussian-blurred blobs image used as input (radius = 3).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/blobs-watershed-no-preprocessing.png
	width 32text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Watershed segmentation on original image (
\begin_inset Formula $h_{{min}}=0$
\end_inset

, 
\begin_inset Formula $h_{{max}}=150$
\end_inset

).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/blobs-blur-watershed.png
	width 32text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Watershed segmentation on Gaussian-blurred original image (radius = 3, 
\begin_inset Formula $h_{{min}}=0$
\end_inset

, 
\begin_inset Formula $h_{{max}}=150$
\end_inset

).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Input and result images from the macro example.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Marker-controlled Watershed plugin
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Marker-controlled Watershed is an ImageJ/Fiji plugin to segment grayscale
 images of any type (8, 16 and 32-bit) in 2D and 3D based on the marker-controll
ed watershed algorithm by 
\begin_inset CommandInset citation
LatexCommand citet
key "meyer1990morphological"

\end_inset

.
 As the previous method, this algorithm considers the input image as a topograph
ic surface (where higher pixel values mean higher altitude) but it simulates
 its flooding from
\series bold
 specific seed points or markers
\series default
.
 A common choice for the markers are the local minima of the gradient of
 the image, but the method works on any specific marker, either selected
 manually by the user or determined automatically by another algorithm (see
 Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-of-marker-controlled-watershed"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/arabidopsis-nucleus-segmentation.svg
	width 90text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-of-marker-controlled-watershed"

\end_inset

Example of marker-controlled watershed segmentation on nucleus of Arabidopsis
 thaliana (image by courtesy of Javier Arpon, INRA-Versailles).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout Standard
Marker-controlled Watershed needs at least two images to run.
 If that's the case, a dialog like the following will pop up:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Marker-controlled-Watershed-dialog.png
	width 40text%

\end_inset


\end_layout

\begin_layout Standard
Let's have a look at the different parameters:
\end_layout

\begin_layout Itemize
Image parameters:
\end_layout

\begin_deeper
\begin_layout Itemize
The 
\series bold
Input image
\series default
: a 2D or 3D grayscale image to flood, usually the gradient of an image.
 
\end_layout

\begin_layout Itemize
The 
\series bold
Marker image
\series default
: an image of the same dimensions as the input containing the seed points
 or markers as connected regions of voxels, each of them with a different
 label.
 They correspond usually to the local minima of the input image, but they
 can be set arbitrarily.
 
\end_layout

\end_deeper
\begin_layout Itemize
And it can optionally admit a third image:
\end_layout

\begin_deeper
\begin_layout Itemize
The 
\series bold
Mask image
\series default
: a binary image of the same dimensions as input and marker which can be
 used to restrict the areas of application of the algorithm.
 Set to "None" to run the method on the whole input image.
 
\end_layout

\end_deeper
\begin_layout Itemize
Rest of parameters:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Calculate dams
\series default
: select to enable the calculation of watershed lines.
 Use diagonal connectivity: select to allow the flooding in diagonal directions.
 
\end_layout

\end_deeper
\begin_layout Standard
Output:
\end_layout

\begin_layout Itemize

\series bold
Labeled image
\series default
 containing the catchment basins and (optionally) watershed lines (dams).
\end_layout

\begin_layout Section
Morphological Segmentation plugin
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Morphological Segmentation is an ImageJ/Fiji plugin that combines morphological
 operations, such as extended minima and morphological gradient, with watershed
 flooding algorithms to segment grayscale images of any type (8, 16 and
 32-bit) in 2D and 3D.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Morphological-segmentation-front.png
	width 90text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Overview of the Morphological Segmentation plugin.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout Standard
Morphological Segmentation runs on any open grayscale image, single 2D image
 or (3D) stack.
 If no image is open when calling the plugin, an Open dialog will pop up.
\end_layout

\begin_layout Standard
The user can pan, zoom in and out, or scroll between slices (if the input
 image is a stack) in the main canvas as if it were any other ImageJ window.
 On the left side of the canvas there are three panels of parameters, one
 for the input image, one with the watershed parameters and one for the
 output options.
 All buttons, checkboxes and input panels contain a short explanation of
 their functionality that is displayed when the cursor lingers over them.
\end_layout

\begin_layout Standard

\series bold
Image pre-processing
\series default
: some pre-processing is included in the plugin to facilitate the segmentation
 task.
 However, other pre-preprocessing may be required depending on the input
 image.
 It is up to the user to decide what filtering may be most appropriate upstream.
\end_layout

\begin_layout Subsubsection
Input Image panel
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Morphological-segmentation-input-image-panel.png
	width 40text%

\end_inset


\end_layout

\begin_layout Standard
First, you need to indicate the nature of the input image to process.
 This is a 
\series bold
key parameter
\series default
 since the watershed algorithm is expecting an image where the boundaries
 of objects present high intensity values (usually as a result of a gradient
 or edge detection filtering).
 
\end_layout

\begin_layout Standard
You should select:
\end_layout

\begin_layout Itemize

\series bold
Border Image
\series default
: if your input image has highlighted object boundaries.
 
\end_layout

\begin_layout Itemize

\series bold
Object Image
\series default
: if the borders of the objects do not have higher intensity values than
 the rest of voxels in the image.
 
\end_layout

\begin_layout Standard
When selecting “Object Image”, an additional set of options is enabled to
 choose the type of gradient and radius (in pixels) to apply to the input
 image before starting the morphological operations.
 Finally, a checkbox allows displaying the gradient image instead of the
 input image in the main canvas of the plugin (only after running the watershed
 segmentation).
\end_layout

\begin_layout Subsubsection
Watershed Segmentation panel
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Morphological-segmentation-watershed-segmentation-panel.png
	width 40text%

\end_inset


\end_layout

\begin_layout Standard
This panel is reserved to the parameters involved in the segmentation pipeline.
 By default, only the tolerance can be changed.
 Clicking on “Advanced options” enables the rest of options.
\end_layout

\begin_layout Itemize

\series bold
Tolerance
\series default
: dynamic of intensity for the search of regional minima (in the extended-minima
 transform, which is the regional minima of the H-minima transform, value
 of h).
 Increasing the tolerance value reduces the number of segments in the final
 result, while decreasing its value produces more object splits.
 
\end_layout

\begin_layout Itemize

\series bold
Calculate dams
\series default
: un-check this option to produce segmentations without watershed lines.
 
\end_layout

\begin_layout Itemize

\series bold
Connectivity
\series default
: voxel connectivity (4-8 in 2D, and 6-26 in 3D).
 Selecting non-diagonal connectivity (4 or 6) usually provides more rounded
 objects.
 
\end_layout

\begin_layout Standard
Finally, 
\series bold
click on “Run” to launch the segmentation
\series default
.
\end_layout

\begin_layout Standard
If your segmentation is taking too long or you want 
\series bold
to stop it
\series default
 for any reason, you can do so by clicking on the same button (which should
 read “STOP” during that process).
\end_layout

\begin_layout Subsubsection
Results panel
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Morphological-segmentation-results-panel.png
	width 40text%

\end_inset


\end_layout

\begin_layout Standard
Only enabled after running the segmentation.
 
\end_layout

\begin_layout Itemize

\series bold
Display
\series default
: list of options to display the segmentation results.
 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Overlaid basins
\series default
: colored objects overlaying the input image (with or without dams depending
 on the selected option in the Watershed Segmentation panel).
 
\end_layout

\begin_layout Itemize

\series bold
Overlaid dams
\series default
: overlay the watershed dams in red on top of the input image (only works
 if “Calculate dams” is checked).
 
\end_layout

\begin_layout Itemize

\series bold
Catchment basins
\series default
: colored objects.
 
\end_layout

\begin_layout Itemize

\series bold
Watershed lines
\series default
: binary image showing the watershed lines in black and the objects in white
 (only works if “Calculate dams” is checked).
 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Show result overlay
\series default
: toggle result overlay.
 
\end_layout

\begin_layout Itemize

\series bold
Create image button
\series default
: create a new image with the results displayed in the canvas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Morphological-segmentation-result-examples.png
	lyxscale 50
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Examples of the 4 different display options.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Macro language compatibility
\end_layout

\begin_layout Standard
Morphological Segmentation is completely compatible with the popular ImageJ
 macro language
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://imagej.net/developer/macro/macros.html
\end_layout

\end_inset


\end_layout

\end_inset

.
 Each of the buttons in the GUI are macro-recordable and their commands
 can be reproduced later from a simple macro file.
\end_layout

\begin_layout Standard
The complete list of commands is as follows:
\end_layout

\begin_layout Itemize
Start the plugin:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

run("Morphological Segmentation");
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Select input image:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

// select as object image
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setInputImageType", "object");
\end_layout

\begin_layout Plain Layout

// select as border image
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setInputImageType", "border");
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Run segmentation with specific options:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.segment","tolerance=10", "calculat
eDams=true","connectivity=6");
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Toggle result overlay:
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.toggleOverlay");
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Set option to display gradient image:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setShowGradient", "true");
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Select display format:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

// Overlaid basins
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setDisplayFormat", "Overlaid
 basins"); 
\end_layout

\begin_layout Plain Layout

// Overlaid dams
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setDisplayFormat", "Overlaid
 dams");
\end_layout

\begin_layout Plain Layout

// Catchment basins
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setDisplayFormat", "Catchment
 basins");
\end_layout

\begin_layout Plain Layout

// Watershed lines 
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setDisplayFormat", "Watershed
 lines");
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create new image with the current result:
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.createResultImage");
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Complete macro example
\end_layout

\begin_layout Standard
The following macro opens the Blobs sample image, applies the plugin with
 a tolerance value of 32 and displays the result as overlaid dams.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,captionpos=b,commentstyle={\color{mygreen}},keywordstyle={\color{blue}},language=Java,linebackgroundcolor={\ifodd\value{lstnumber}\color{lightgray}\fi},numbers=left,showstringspaces=false,stringstyle={\color{magenta}}"
inline false
status open

\begin_layout Plain Layout

// load the Blobs sample image 
\end_layout

\begin_layout Plain Layout

run("Blobs (25K)"); 
\end_layout

\begin_layout Plain Layout

// run the plugin 
\end_layout

\begin_layout Plain Layout

run("Morphological Segmentation"); 
\end_layout

\begin_layout Plain Layout

// wait for the plugin GUI to load 
\end_layout

\begin_layout Plain Layout

wait(1000); 
\end_layout

\begin_layout Plain Layout

// select input image as "object" 
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setInputImageType", "object");
 
\end_layout

\begin_layout Plain Layout

// set gradient radius as 1 
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setGradientRadius", "1");
 
\end_layout

\begin_layout Plain Layout

// run segmentation with tolerance 32, calculating the watershed dams, 
 
\end_layout

\begin_layout Plain Layout

// 4-connectivity  
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.segment", "tolerance=32",
  "calculateDams=true", "connectivity=4"); 
\end_layout

\begin_layout Plain Layout

// display the overlaid dams 
\end_layout

\begin_layout Plain Layout

call("inra.ijpb.plugins.MorphologicalSegmentation.setDisplayFormat", "Overlaid
 dams");
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Measurements
\end_layout

\begin_layout Standard
Several measurements are provided for binary or label 2D or 3D images.
 The results are provided in a ResultsTable, whose name contains the name
 of the original image.
\end_layout

\begin_layout Description
Bounding
\begin_inset space ~
\end_inset

box returns the minimal and maximal coordinates in each direction for each
 label
\end_layout

\begin_layout Description
Volume
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

surface
\begin_inset space ~
\end_inset

area computes the volume, the surface area, and a sphericity index, defined
 as 
\begin_inset Formula $36\pi V^{2}/S^{3}$
\end_inset

.
 Surface area is computed using a discretized version of the Crofton formula.
\end_layout

\begin_layout Description
Inertia
\begin_inset space ~
\end_inset

ellipse
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

ellipsoid returns the centroid (center of gravity) as well as the size and
 the orientation of the inertia ellipse or ellipsoid of each particle.
 Radiuses are sorted in decreasing order.
 Angles are given in degrees, and correspond to the azimut (
\begin_inset Quotes eld
\end_inset

yaw
\begin_inset Quotes erd
\end_inset

), the elevation (
\begin_inset Quotes eld
\end_inset

pitch
\begin_inset Quotes erd
\end_inset

), and the roll around the main axis.
\end_layout

\begin_layout Chapter
Binary image utilities
\end_layout

\begin_layout Standard
Some functions specific for the processing of binary images:
\end_layout

\begin_layout Description
Connected
\begin_inset space ~
\end_inset

Components
\begin_inset space ~
\end_inset

Labeling transforms the binary image into a label image by assigning a specific
 number (label) to each connected component
\end_layout

\begin_layout Description
Chamfer
\begin_inset space ~
\end_inset

Distance
\begin_inset space ~
\end_inset

Map computes an approximate distance map between each foregrond pixel to
 the nearest background pixel
\end_layout

\begin_layout Description
Keep
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

Remove
\begin_inset space ~
\end_inset

Largest
\begin_inset space ~
\end_inset

Region identifies the largest connected component, and keep it or remove
 it
\end_layout

\begin_layout Description
Size
\begin_inset space ~
\end_inset

Opening computes the size (area in 2D, volume in 3D) of each connected component
, and remove all particles whose size is below the value specified by the
 user.
\end_layout

\begin_layout Standard
Algorithms work for both 2D or 3D images.
 Default connectivity 4 (resp.
 6) is used for 2D (resp.
 3D) images.
\end_layout

\begin_layout Chapter
Label image utilities
\end_layout

\begin_layout Standard
Some functions specific for the processing of label images, in which the
 pixel/voxel values is used to identify the particle it belongs to.
 The value 0 is assumed to correspond to the beackground.
\end_layout

\begin_layout Description
Remove
\begin_inset space ~
\end_inset

Border
\begin_inset space ~
\end_inset

Labels similar to 
\begin_inset Quotes eld
\end_inset

kill borders
\begin_inset Quotes erd
\end_inset

 function, but operates faster as no morphological reconstruction is required.
\end_layout

\begin_layout Description
Select
\begin_inset space ~
\end_inset

Label(s) enters a set of labels, and creates a new label image containing
 only the selected labels.
\end_layout

\begin_layout Description
Crop
\begin_inset space ~
\end_inset

Label creates a new binary image containing only the label specified by
 the user.
 The size of the new image is fitted to the region.
\end_layout

\begin_layout Description
Replace
\begin_inset space ~
\end_inset

Value replaces the value of a region by another value.
 Can be used to 
\begin_inset Quotes eld
\end_inset

clear
\begin_inset Quotes erd
\end_inset

 a label, by replacing its value by 0, or to merge to adjacent regions.
\end_layout

\begin_layout Description
Label
\begin_inset space ~
\end_inset

Boundaries creates a new binary image containing value 255 for pixels/voxels
 having a neighbour with a different value.
\end_layout

\begin_layout Description
Keep
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

Remove
\begin_inset space ~
\end_inset

Largest
\begin_inset space ~
\end_inset

Label identifies the largest label, and keep it or remove it
\end_layout

\begin_layout Description
Label
\begin_inset space ~
\end_inset

Size
\begin_inset space ~
\end_inset

Opening computes the size (area in 2D, volume in 3D) of each region, and
 remove all labels whose size is below the value specified by the user.
\end_layout

\begin_layout Description
Assign
\begin_inset space ~
\end_inset

Measure
\begin_inset space ~
\end_inset

To
\begin_inset space ~
\end_inset

Label combines a label image with a results table, and creates a new image
 for which each pixel/voxel is assigned the measurement value corresponding
 to the label it belongs to.
\end_layout

\begin_layout Description
Set
\begin_inset space ~
\end_inset

Label
\begin_inset space ~
\end_inset

Map allows to choose the color map used to display a label image.
 In particular, suffling the color map and/or choosing a specific color
 for background allows better visualisation that only grey levels
\end_layout

\begin_layout Description
Label
\begin_inset space ~
\end_inset

To
\begin_inset space ~
\end_inset

RGB converts a label image to true RGB image.
 Similar to ImageJ native conversion, but this plugin avoids confusion between
 background pixels and regions with low labels.
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliography"
options "plainnat"

\end_inset


\end_layout

\end_body
\end_document
